version: '3.8'

services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    env_file:
      - ./.env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - backend_network
      - frontend_network

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - static_volume:/var/html/static
      - media_volume:/var/html/media
    depends_on:
      - web
    restart: always
    networks:
      - frontend_network

networks:
  backend_network:
    internal: true
  frontend_network:

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: 